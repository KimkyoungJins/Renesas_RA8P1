/*
* Copyright (c) 2020 - 2025 Renesas Electronics Corporation and/or its affiliates
*
* SPDX-License-Identifier: BSD-3-Clause
*/

#include "hal_data.h"

void R_BSP_WarmStart(bsp_warm_start_event_t event);

extern bsp_leds_t g_bsp_leds;




// 한 번 각 LED를 500마이크로 세컨드로 깜빡여보자
void hal_entry (void){

    R_BSP_NonSecureEnter();


   uint32_t index = 0;
   const uint32_t delay_ms = 200;
   bsp_leds_t leds = g_bsp_leds;

   if(leds.led_count == 0){
       while(1){
           ;
       }
   }




   while(1){

       // 들어가기 전에 리지스터 안정화 핀체
       R_BSP_PinAccessEnable();


       // 하나 하나씩 다 킨다.
       R_BSP_PinWrite((bsp_io_port_pin_t) leds.p_leds[index], BSP_IO_LEVEL_HIGH);




   }













}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart (bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
#if BSP_FEATURE_FLASH_LP_VERSION != 0

        /* Enable reading from data flash. */
        R_FACI_LP->DFLCTL = 1U;

        /* Would normally have to wait tDSTOP(6us) for data flash recovery. Placing the enable here, before clock and
         * C runtime initialization, should negate the need for a delay since the initialization will typically take more than 6us. */
#endif
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open(&IOPORT_CFG_CTRL, &IOPORT_CFG_NAME);
    }
}
